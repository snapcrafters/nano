%YAML 1.1
---
# Snapcraft Recipe for GNU nano
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

name: nano
summary: Small, friendly text editor inspired by Pico
description: |
  GNU nano is an easy-to-use text editor originally designed as a replacement
  for Pico, the ncurses-based editor from the non-free mailer package Pine
  (itself now available under the Apache License as Alpine).

  However, GNU nano also implements many features missing in Pico, including:
    - undo/redo
    - line numbering
    - syntax coloring
    - soft-wrapping of overlong lines
    - selecting text by holding Shift
    - interactive search and replace (with regular expression support)
    - a go-to line (and column) command
    - support for multiple file buffers
    - auto-indentation
    - tab completion of filenames and search terms
    - toggling features while running
    - and full internationalization support

  This is NOT an official nano distribution, refer the issue tracker for any problems regarding the use of this snap:

    Issues Â· Lin-Buo-Ren/nano-snap
    https://github.com/Lin-Buo-Ren/nano-snap/issues

icon: snap/gui/nano.png

#version: determined-by-adopt-info
adopt-info: nano

confinement: strict
grade: stable

plugs:
  # Storage access
  home:
    #read: all # Enable this will make this interface non-A/C
  removable-media: # Non-A/C

  # For checking updates
  network:

apps:
  nano:
    command: >
      bin/workaround-snap-arch-triplet-launch
      "${SNAP}"/bin/classic-launch
      "${SNAP}"/bin/locales-launch
      "${SNAP}"/bin/magic-launch
      "${SNAP}"/bin/nano-launch
      "${SNAP}"/bin/nano
    environment:
      # Enable classic snap update checker
      CLASSIC_LAUNCH_ENABLE_UPDATE_CHECKER: 'true'

      # Fix "Error opening terminal: xterm-256color." error in classic confinement
      # DOC: terminfo(5) manpage
      TERMINFO_DIRS: /snap/core/current/lib/terminfo

  rnano:
    command: >
      bin/workaround-snap-arch-triplet-launch
      "${SNAP}"/bin/classic-launch
      "${SNAP}"/bin/locales-launch
      "${SNAP}"/bin/magic-launch
      "${SNAP}"/bin/nano-launch
      "${SNAP}"/bin/rnano
    environment:
      # Enable classic snap update checker
      CLASSIC_LAUNCH_ENABLE_UPDATE_CHECKER: 'true'

      # Fix "Error opening terminal: xterm-256color." error in classic confinement
      # DOC: terminfo(5) manpage
      TERMINFO_DIRS: /snap/core/current/lib/terminfo

hooks:
  post-refresh:
    plugs:
    - network

parts:
  # Utility programs to help with packaging
  utilities:
    source: snap/local/utilities
    plugin: dump
    organize:
      '*': assets/utilities/
    prime:
    - -*

  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*-launch': bin/

  # Programs for the snap maintainence
  helpers:
    source: snap/local/helpers
    plugin: dump
    organize:
      '*': bin/
    stage:
    - -bin/README*

  # Program patches to solve issues that can't be solved by tweaking in runtime
  #patches:
    #source: snap/local/patches
    #plugin: dump
    #organize:
      #'*': assets/patches/
    #prime:
    #- -*

  # Required by classic-launch part
  workaround-snap-arch-triplet:

  classic-launch:

  # Remote part for fixing the glibc locales(and gnu gettext I18N support)
  # This part is only required for non GUI apps that don't uses the desktop-launch launchers
  locales-launch:

  # Remote part for recording the exact revision for each part during building
  parts-meta-info:

  # A minimal nanorc for this snap
  rcfiles:
    source: snap/local/rcfiles
    plugin: dump
    organize:
      '*': assets/rcfiles/

  nano:
    after:
    - utilities

    override-pull: '"${SNAPCRAFT_STAGE}"/assets/utilities/parts-nano-override-pull.bash'

    plugin: autotools
    configflags:
    - --datarootdir=/snap/$SNAPCRAFT_PROJECT_NAME/current/share
    - --sysconfdir=/snap/$SNAPCRAFT_PROJECT_NAME/current/assets/rcfiles
    build-packages:
    - gettext
    - groff
    - libmagic-dev
    - libncursesw5-dev
    - pkg-config
    - texinfo
    stage-packages:
    - libmagic1
    - libncursesw5
    organize:
      snap/$SNAPCRAFT_PROJECT_NAME/current: /
